{"version":3,"sources":["assets/shopping/GoodsShelf.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2DAAyD;AAEzD;IAAA;IAIA,CAAC;IAAD,cAAC;AAAD,CAJA,AAIC,IAAA;AAJY,0BAAO;AAKd,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAA;AAE3C;IAAwC,8BAAW;IAAnD;QAAA,qEAmCC;QAjCG,WAAK,GAAW,CAAC,CAAA;QAGjB,cAAQ,GAAW,CAAC,CAAA;;IA8BxB,CAAC;IA7Ba,2BAAM,GAAhB;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,EAAE,CAAA;QAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAA;QACxB,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAA;QAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;IACnC,CAAC;IAEM,wBAAG,GAAV,UAAW,KAAK;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAA;IACvC,CAAC;IAEM,yBAAI,GAAX,UAAY,KAAK;QACb,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAA;SAC/B;IACL,CAAC;IAEM,wBAAG,GAAV,UAAW,KAAK;QACZ,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAA;QAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IAC/E,CAAC;IAES,2BAAM,GAAhB,UAAiB,EAAU;QACvB,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAA;QACnB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,EAAE;YACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;YACjB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACd;IACL,CAAC;IAhCD;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;6CACJ;IAFA,UAAU;QAD9B,OAAO;OACa,UAAU,CAmC9B;IAAD,iBAAC;CAnCD,AAmCC,CAnCuC,yBAAW,GAmClD;kBAnCoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["import { VGameObject } from \"../src/app/base/VGameObject\"\n\nexport class Product {\n    cfgId: number | string\n    amount: number\n    maxAmount: number\n}\nconst { ccclass, property } = cc._decorator\n@ccclass\nexport default class GoodsShelf extends VGameObject {\n    @property(cc.Integer)\n    cfgId: number = 0\n\n    product: Product\n    interval: number = 3\n    protected onLoad(): void {\n        this.product = new Product()\n        this.product.amount = 10\n        this.product.maxAmount = 10\n        this.product.cfgId = this.cfgId\n    }\n\n    public has(count) {\n        return this.product.amount >= count\n    }\n\n    public cost(count) {\n        if (this.has(count)) {\n            this.product.amount -= count\n        }\n    }\n\n    public add(count) {\n        this.product.amount += count\n        this.product.amount = Math.min(this.product.amount, this.product.maxAmount)\n    }\n\n    protected update(dt: number): void {\n        this.interval -= dt\n        if (this.interval <= 0) {\n            this.interval = 3\n            this.add(1)\n        }\n    }\n}\n"]}
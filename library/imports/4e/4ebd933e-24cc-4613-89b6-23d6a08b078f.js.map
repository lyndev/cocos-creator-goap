{"version":3,"sources":["assets/src/app/gamedata/actions/ChopTreeAction.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import TimeUtil from \"../../../utils/TimeUtil\"\nimport { ActionStatus } from \"../../ai/goap/ActionStatus\"\nimport { GoapAction } from \"../../ai/goap/GoapAction\"\nimport { VGameObject } from \"../../base/VGameObject\"\nimport { BackPackComponent } from \"../BackPackComponent\"\nimport { Environment } from \"../Environment\"\nimport { Labourer } from \"../labourers/Labourer\"\nimport { ToolComponent } from \"../ToolComponent\"\nimport { TreeComponent } from \"../TreeComponent\"\n\nexport class ChopTreeAction extends GoapAction {\n    private chopped: boolean = false\n\n    private startTime: number = 0\n    private workDuration: number = 2 // seconds\n    public constructor() {\n        super()\n        this.addPrecondition(ActionStatus.HasTool, true) // we need a tool to do this\n        this.addPrecondition(ActionStatus.HasLogs, false) // if we have logs we don't want more\n        this.addEffect(ActionStatus.HasLogs, true)\n    }\n    public reset(): void {\n        this.chopped = false\n        this.startTime = 0\n    }\n\n    public isDone() {\n        return this.chopped\n    }\n\n    public requiresInRange() {\n        return true\n    }\n    public checkProceduralPrecondition(agent: cc.Node): boolean {\n        // TODO:find the nearest tree that we can chop\n        let trees: TreeComponent[] = Environment.treeComps\n        let closest: TreeComponent = null\n        let closestDist: number = 0\n        let vg = agent.getComponent(VGameObject)\n        for (let tree of trees) {\n            if (closest == null) {\n                // first one, so choose it for now\n                closest = tree\n                closestDist = tree.distanceSquare(vg)\n            } else {\n                // is this one closer than the last?\n                let dist: number = tree.distanceSquare(vg)\n                if (dist < closestDist) {\n                    // we found a closer one, use it\n                    closest = tree\n                    closestDist = dist\n                }\n            }\n        }\n        if (closest == null) return false\n\n        this.target = closest\n\n        return closest != null\n    }\n\n    public perform(node: cc.Node): boolean {\n        let labourer = node.getComponent(Labourer)\n        if (this.startTime == 0) this.startTime = TimeUtil.getTime()\n        if (TimeUtil.getTime() - this.startTime > this.workDuration) {\n            // finished chopping\n            let backpack: BackPackComponent = labourer.backpack\n            backpack.numLogs += 1\n            this.chopped = true\n            let tool: ToolComponent = labourer.tool\n            tool.use(0.34)\n            console.log(\"使用工具\", this.constructor.name)\n            if (tool.destroyed()) {\n                // TODO: Destroy(backpack.tool);\n                // backpack.tool = null;\n                labourer.destroyTool()\n            }\n        }\n        return true\n    }\n}\n"]}
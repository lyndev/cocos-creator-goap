{"version":3,"sources":["assets/src/app/gamedata/actions/ForgeToolAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,oDAA8C;AAC9C,2DAAyD;AACzD,uDAAqD;AACrD,sDAAoD;AAEpD,8CAA4C;AAE5C,kDAAgD;AAEhD;IAAqC,mCAAU;IAM3C;QAAA,YACI,iBAAO,SAGV;QATO,YAAM,GAAY,KAAK,CAAA;QAGvB,eAAS,GAAW,CAAC,CAAA;QACrB,mBAAa,GAAW,CAAC,CAAA,CAAC,UAAU;QAGxC,KAAI,CAAC,eAAe,CAAC,2BAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;QAC/C,KAAI,CAAC,SAAS,CAAC,2BAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;;IAClD,CAAC;IAEM,+BAAK,GAAZ;QACI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAA;IACtB,CAAC;IAEM,gCAAM,GAAb;QACI,OAAO,IAAI,CAAC,MAAM,CAAA;IACtB,CAAC;IACM,yCAAe,GAAtB;QACI,OAAO,IAAI,CAAA;IACf,CAAC;IAEM,qDAA2B,GAAlC,UAAmC,EAAW;QAC1C,8BAA8B;QAC9B,IAAI,MAAM,GAAqB,yBAAW,CAAC,UAAU,CAAA;QACrD,IAAI,OAAO,GAAmB,IAAI,CAAA;QAClC,IAAI,WAAW,GAAW,CAAC,CAAA;QAC3B,IAAI,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,yBAAW,CAAC,CAAA;QACrC,KAAkB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,EAAE;YAArB,IAAI,KAAK,eAAA;YACV,IAAI,OAAO,IAAI,IAAI,EAAE;gBACjB,kCAAkC;gBAClC,OAAO,GAAG,KAAK,CAAA;gBACf,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;aACzC;iBAAM;gBACH,oCAAoC;gBACpC,IAAI,IAAI,GAAW,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;gBAC3C,IAAI,IAAI,GAAG,WAAW,EAAE;oBACpB,gCAAgC;oBAChC,OAAO,GAAG,KAAK,CAAA;oBACf,WAAW,GAAG,IAAI,CAAA;iBACrB;aACJ;SACJ;QACD,IAAI,OAAO,IAAI,IAAI;YAAE,OAAO,KAAK,CAAA;QAEjC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAA;QAErB,OAAO,OAAO,IAAI,IAAI,CAAA;IAC1B,CAAC;IAEM,iCAAO,GAAd,UAAe,IAAa;QACxB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC;YAAE,IAAI,CAAC,SAAS,GAAG,kBAAQ,CAAC,OAAO,EAAE,CAAA;QAC5D,IAAI,kBAAQ,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE;YAC1D,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,mBAAQ,CAAC,CAAA;YAC1C,0BAA0B;YAC1B,IAAI,QAAQ,GAAsB,QAAQ,CAAC,QAAQ,CAAA;YACnD,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;YACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;SACrB;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IACL,sBAAC;AAAD,CA/DA,AA+DC,CA/DoC,uBAAU,GA+D9C;AA/DY,0CAAe","file":"","sourceRoot":"/","sourcesContent":["import TimeUtil from \"../../../utils/TimeUtil\"\nimport { ActionStatus } from \"../../ai/goap/ActionStatus\"\nimport { GoapAction } from \"../../ai/goap/GoapAction\"\nimport { VGameObject } from \"../../base/VGameObject\"\nimport { BackPackComponent } from \"../BackPackComponent\"\nimport { Environment } from \"../Environment\"\nimport { ForgeComponent } from \"../ForgeComponent\"\nimport { Labourer } from \"../labourers/Labourer\"\n\nexport class ForgeToolAction extends GoapAction {\n    private forged: boolean = false\n    public target: ForgeComponent // where we forge tools\n\n    private startTime: number = 0\n    private forgeDuration: number = 2 // seconds\n    public constructor() {\n        super()\n        this.addPrecondition(ActionStatus.HasOre, true)\n        this.addEffect(ActionStatus.HasNewTools, true)\n    }\n\n    public reset() {\n        this.forged = false\n        this.startTime = 0\n    }\n\n    public isDone(): boolean {\n        return this.forged\n    }\n    public requiresInRange(): boolean {\n        return true\n    }\n\n    public checkProceduralPrecondition(go: cc.Node): boolean {\n        //TODO: find the nearest forge\n        let forges: ForgeComponent[] = Environment.forgeComps\n        let closest: ForgeComponent = null\n        let closestDist: number = 0\n        let vg = go.getComponent(VGameObject)\n        for (let forge of forges) {\n            if (closest == null) {\n                // first one, so choose it for now\n                closest = forge\n                closestDist = forge.distanceSquare(vg)\n            } else {\n                // is this one closer than the last?\n                let dist: number = forge.distanceSquare(vg)\n                if (dist < closestDist) {\n                    // we found a closer one, use it\n                    closest = forge\n                    closestDist = dist\n                }\n            }\n        }\n        if (closest == null) return false\n\n        this.target = closest\n\n        return closest != null\n    }\n\n    public perform(node: cc.Node): boolean {\n        if (this.startTime == 0) this.startTime = TimeUtil.getTime()\n        if (TimeUtil.getTime() - this.startTime > this.forgeDuration) {\n            let labourer = node.getComponent(Labourer)\n            // finished forging a tool\n            let backpack: BackPackComponent = labourer.backpack\n            backpack.numOre = 0\n            this.forged = true\n        }\n        return true\n    }\n}\n"]}
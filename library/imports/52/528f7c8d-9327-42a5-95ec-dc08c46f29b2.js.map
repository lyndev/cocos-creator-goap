{"version":3,"sources":["assets/shopping/Buyer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../src/app/ai/goap/GoapAction\"\nimport { GoapAgent } from \"../src/app/ai/goap/GoapAgent\"\nimport { IGoap } from \"../src/app/ai/goap/IGoap\"\nimport ActionBuyerLeave from \"./ActionBuyerLeave\"\nimport ActionBuyerPay from \"./ActionBuyerPay\"\nimport ActionBuyProduct from \"./ActionBuyProduct\"\nimport ActionGetBag from \"./ActionGetBag\"\nimport { Product } from \"./GoodsShelf\"\n\nconst { ccclass } = cc._decorator\n@ccclass\nexport class Buyer extends GoapAgent implements IGoap {\n    bMoving = false\n    bMoveEnd = false\n    needPrdoucts: Map<number, Product>\n    bPayed: boolean = false\n    public onLoad() {\n        super.onLoad()\n        this.needPrdoucts = new Map<number, Product>()\n        let needProd = new Product()\n        needProd.amount = 0\n        needProd.cfgId = 1\n        needProd.maxAmount = 10\n\n        let needProd2 = new Product()\n        needProd2.amount = 0\n        needProd2.cfgId = 2\n        needProd2.maxAmount = 10\n\n        this.needPrdoucts.set(1, needProd)\n        this.needPrdoucts.set(2, needProd2)\n\n        let goapAgent = this.getComponent(GoapAgent)\n        goapAgent.setGoap(this)\n\n        this.initAvaliableActions([ActionGetBag, ActionBuyerPay, ActionBuyerLeave])\n    }\n\n    public getProducts() {\n        return this.needPrdoucts\n    }\n\n    protected initAvaliableActions(actionCls: any[]) {\n        let action\n        this.availableActions = []\n        for (let i = 0, len = actionCls.length; i < len; i++) {\n            action = new actionCls[i]()\n            this.availableActions.push(action)\n        }\n\n        this.availableActions.push(new ActionBuyProduct(1))\n        this.availableActions.push(new ActionBuyProduct(2))\n    }\n\n    public update(dt: number) {\n        super.update(dt)\n    }\n\n    public getWorldState(): Map<string, Object> {\n        let worldData: Map<string, Object> = new Map<string, Object>()\n        worldData.set(\"hasProduct1\", this.hasProductFull(1))\n        worldData.set(\"hasProduct2\", this.hasProductFull(2))\n        worldData.set(\"payed\", this.bPayed)\n        worldData.set(\"leaved\", false)\n        return worldData\n    }\n\n    public createGoalState(): Map<string, Object> {\n        let goal = new Map<string, Object>()\n        goal.set(\"hasProduct1\", true)\n        goal.set(\"hasProduct2\", true)\n        goal.set(\"leaved\", true)\n        return goal\n    }\n\n    public planFailed(failedGoad: Map<string, Object>) {}\n\n    public planFound(goal: Map<string, Object>, actions: GoapAction[]) {\n        console.log(\"Plan found: \", GoapAgent.prettyPrintActionsQueue(actions))\n    }\n\n    public actionsFinished(): void {\n        console.log(\"Actions completed\")\n    }\n\n    public planAborted(aborter: GoapAction) {\n        console.log(\"Plan Aborted: \" + GoapAgent.prettyPrintAction(aborter))\n    }\n\n    public moveAgent(nextAction: GoapAction, delta: number) {\n        let target = nextAction.target\n        if (this.bMoveEnd) {\n            this.bMoveEnd = false\n            return true\n        }\n        if (!this.bMoving) {\n            this.bMoving = true\n            let actions = []\n            actions.push(cc.moveTo(2, new cc.Vec2(target.node.x, target.node.y)))\n            actions.push(\n                cc.callFunc(() => {\n                    this.bMoveEnd = true\n                    this.bMoving = false\n                    nextAction.setInRange(true)\n                })\n            )\n            this.node.stopAllActions()\n            this.node.runAction(cc.sequence(actions))\n        }\n\n        return this.bMoveEnd\n    }\n\n    public addProduct(cfgId, v) {\n        let product = this.needPrdoucts.get(cfgId)\n        if (!product) {\n            return\n        }\n\n        product.amount += v\n        product.amount = Math.min(product.amount, product.maxAmount)\n\n        console.log(\"buy prod\", product.cfgId, product.amount)\n    }\n\n    public hasProductFull(cfgId): boolean {\n        let product = this.needPrdoucts.get(cfgId)\n        if (!product) {\n            throw \"unvalid product\" + cfgId\n        }\n        return product.amount >= product.maxAmount\n    }\n\n    public updateBackPack() {}\n}\n"]}
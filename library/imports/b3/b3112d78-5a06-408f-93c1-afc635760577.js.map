{"version":3,"sources":["assets/goap/actions/ActionBuyShopItem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,+DAA6D;AAI7D,kEAAgE;AAChE,qDAA+C;AAI/C;IAAuC,qCAAU;IAK7C;QAAA,YACI,iBAAO,SACV;QANO,WAAK,GAAY,KAAK,CAAA;QACtB,eAAS,GAAW,CAAC,CAAA;QACrB,kBAAY,GAAW,CAAC,CAAA,CAAC,UAAU;QACpC,UAAI,GAAW,CAAC,CAAA;;IAGvB,CAAC;IAEM,iCAAK,GAAZ;QACI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAA;IACtB,CAAC;IAEM,kCAAM,GAAb;QACI,OAAO,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;IAEM,2CAAe,GAAtB;QACI,OAAO,IAAI,CAAA;IACf,CAAC;IAEM,uDAA2B,GAAlC,UAAmC,IAAa;QAC5C,IAAI,yBAAW,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE;YAClC,OAAO,IAAI,CAAA;SACd;IACL,CAAC;IAEM,mCAAO,GAAd,UAAe,IAAa;QACxB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC;YAAE,IAAI,CAAC,SAAS,GAAG,kBAAQ,CAAC,OAAO,EAAE,CAAA;QAE5D,IAAI,kBAAQ,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE;YACzD,wDAAwD;YACxD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;SACpB;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IACL,wBAAC;AAAD,CArCA,AAqCC,CArCsC,uBAAU,GAqChD;AArCY,8CAAiB","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../src/app/ai/goap/GoapAction\"\nimport { GoapAgent } from \"../../src/app/ai/goap/GoapAgent\"\nimport { IGoap } from \"../../src/app/ai/goap/IGoap\"\nimport { VGameObject } from \"../../src/app/base/VGameObject\"\nimport { Environment } from \"../../src/app/gamedata/Environment\"\nimport TimeUtil from \"../../src/utils/TimeUtil\"\nimport { ActionDataStatus } from \"../ActionDataStatus\"\nimport Entity from \"../Entity\"\n\nexport class ActionBuyShopItem extends GoapAction {\n    private bDone: boolean = false\n    private startTime: number = 0\n    private workDuration: number = 2 // seconds\n    public cost: number = 1\n    public constructor() {\n        super()\n    }\n\n    public reset(): void {\n        this.bDone = false\n        this.startTime = 0\n    }\n\n    public isDone() {\n        return this.bDone\n    }\n\n    public requiresInRange() {\n        return true\n    }\n\n    public checkProceduralPrecondition(node: cc.Node): boolean {\n        if (Environment.storeA.isHaveGoods()) {\n            return true\n        }\n    }\n\n    public perform(node: cc.Node): boolean {\n        if (this.startTime == 0) this.startTime = TimeUtil.getTime()\n\n        if (TimeUtil.getTime() - this.startTime > this.workDuration) {\n            //entity.memory.set(ActionDataStatus.isCanOutfire, true)\n            this.bDone = true\n        }\n        return true\n    }\n}\n"]}
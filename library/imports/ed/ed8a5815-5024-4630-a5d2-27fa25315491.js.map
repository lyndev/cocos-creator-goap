{"version":3,"sources":["assets\\goap\\FireNpc.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uDAAsD;AACtD,uDAAsD;AACtD,iDAAgD;AAChD,6DAA4D;AAC5D,mDAAkD;AAClD,mDAAkD;AAClD,0DAAyD;AACzD,qDAAgD;AAE1C,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C;IAAqC,2BAAS;IAA9C;;IA8BA,CAAC;IA7BG,wBAAM,GAAN;QACI,IAAI,IAAI,GAAG,IAAI,sBAAY,EAAE,CAAA;QAC7B,IAAI,CAAC,oBAAoB,CAAC;YACtB,mCAAgB;YACd,+BAAc;YACd,6BAAa;YACb,yCAAmB;YACnB,+BAAc;SACnB,CAAC,CAAA;QACF,IAAI,CAAC,IAAI,EAAE,CAAA;QACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAClB,IAAI,OAAO,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QACxC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACjD,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;SAC1B;IAEL,CAAC;IAGM,iCAAe,GAAtB;QACI,IAAI,IAAI,GAAG,IAAI,GAAG,EAAkB,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,mCAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,wBAAM,GAAN,UAAO,EAAE;QACL,iBAAM,MAAM,YAAC,EAAE,CAAC,CAAA;IACpB,CAAC;IA7BgB,OAAO;QAD3B,OAAO;OACa,OAAO,CA8B3B;IAAD,cAAC;CA9BD,AA8BC,CA9BoC,qBAAS,GA8B7C;kBA9BoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["import { ActionDataStatus } from './ActionDataStatus';\r\nimport { GotoToiletAction } from './GotoToiletAction';\r\nimport { GotoEatAction } from './GotoEatAction';\r\nimport { GotoEquipmentAction } from './GotoEquipmentAction';\r\nimport { GotoFireAction } from './GotoFireAction';\r\nimport { GotSleepAction } from './GotSleepAction';\r\nimport { GoapAgent } from '../src/app/ai/goap/GoapAgent';\r\nimport GoapOutFire2 from './goaps/GoapOutFire2';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class FireNpc extends GoapAgent {\r\n    onLoad(): void {\r\n        let goap = new GoapOutFire2()\r\n        goap.initAvaliableActions([\r\n            GotoToiletAction\r\n            , GotSleepAction\r\n            , GotoEatAction\r\n            , GotoEquipmentAction\r\n            , GotoFireAction\r\n        ])\r\n        this.init()\r\n        this.setGoap(goap)\r\n        let actions = goap.getAvaliableActions()\r\n        for (let index = 0; index < actions.length; index++) {\r\n            const element = actions[index];\r\n            this.addAction(element)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public createGoalState(): Map<string, Object> {\r\n        let goal = new Map<string, Object>();\r\n        goal.set(ActionDataStatus.outFire, true);\r\n        return goal;\r\n    }\r\n\r\n    update(dt) {\r\n        super.update(dt)\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["assets/shopping/ActionBuyerPay.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,4DAA0D;AAC1D,iCAA+B;AAE/B,6CAAuC;AAEvC;IAA4C,kCAAU;IAGlD;QAAA,YACI,iBAAO,SAIV;QAPS,WAAK,GAAY,KAAK,CAAA;QAI5B,KAAI,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,CAAC,CAAA;QACxC,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QACpC,KAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;;IACjC,CAAC;IAED,8BAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACtB,CAAC;IAED,+BAAM,GAAN;QACI,OAAO,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;IAED,oDAA2B,GAA3B,UAA4B,EAAW;QACnC,IAAI,qBAAW,CAAC,UAAU,EAAE;YACxB,IAAI,CAAC,MAAM,GAAG,qBAAW,CAAC,UAAU,CAAA;YACpC,OAAO,IAAI,CAAA;SACd;QACD,OAAO,KAAK,CAAA;IAChB,CAAC;IAED,gCAAO,GAAP,UAAQ,IAAa;QAArB,iBASC;QARG,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,aAAK,CAAC,CAAA;QACpC,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAA;QAC/B,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,CAAC;YAClB,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACzB,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;QACjB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACnB,OAAO,IAAI,CAAA;IACf,CAAC;IAED,wCAAe,GAAf;QACI,OAAO,IAAI,CAAA;IACf,CAAC;IACL,qBAAC;AAAD,CAxCA,AAwCC,CAxC2C,uBAAU,GAwCrD","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../src/app/ai/goap/GoapAction\"\nimport { Buyer } from \"./Buyer\"\nimport Checkstand from \"./Checkstand\"\nimport ContextShop from \"./ContextShop\"\n\nexport default class ActionBuyerPay extends GoapAction {\n    protected bDone: boolean = false\n    public target: Checkstand\n    constructor() {\n        super()\n        this.addPrecondition(\"hasProduct\", true)\n        this.addPrecondition(\"payed\", false)\n        this.addEffect(\"payed\", true)\n    }\n\n    reset(): void {\n        this.bDone = false\n    }\n\n    isDone(): boolean {\n        return this.bDone\n    }\n\n    checkProceduralPrecondition(go: cc.Node): boolean {\n        if (ContextShop.checkstand) {\n            this.target = ContextShop.checkstand\n            return true\n        }\n        return false\n    }\n\n    perform(node: cc.Node): boolean {\n        let buyer = node.getComponent(Buyer)\n        let prods = buyer.getProducts()\n        prods.forEach((prod, _) => {\n            this.target.pay(prod)\n        })\n        this.bDone = true\n        console.log(\"结算完成\")\n        return true\n    }\n\n    requiresInRange(): boolean {\n        return true\n    }\n}\n"]}
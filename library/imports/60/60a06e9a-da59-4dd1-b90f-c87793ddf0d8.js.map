{"version":3,"sources":["assets/src/app/ai/fsm/StateManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * 状态管理类\n */\n\nimport { StateBase } from \"./state/StateBase\"\nexport class StateManager {\n    public static InvalidState: string = \"Invalid\"\n\n    protected _stateDic: { [key: string]: StateBase }\n    protected _currentState: StateBase = null\n    protected _lastState: StateBase = null\n    protected _owner: cc.Node\n\n    constructor(owner: any) {\n        this._stateDic = {}\n        this._owner = owner\n    }\n\n    public isExist(stateKey: string): boolean {\n        return !!this._stateDic[stateKey]\n    }\n\n    public getStateByKey(stateKey: string): StateBase {\n        return this._stateDic[stateKey]\n    }\n\n    /**\n     * 注册状态\n     * @param key\n     * @param state\n     *\n     */\n    public registerState(key: string, state: StateBase): void {\n        if (this._owner != state.owner) {\n            console.warn(\"statemachine 与 state 所有者不一致\")\n            return\n        }\n        this._stateDic[key] = state\n    }\n\n    /**\n     * 移除状态\n     * @param key\n     *\n     */\n    public removeState(key: string): void {\n        delete this._stateDic[key]\n    }\n\n    /**\n     * 改变状态\n     * @param key\n     * @param obj\n     * @param isForce 当当前状态和要切换的状态相同时，是否强制切换状态\n     */\n    public changeState(key: string, obj: any = null, isForce = false): void {\n        if (!isForce && this._currentState && this._currentState.getStateKey() == key) {\n            return\n        }\n        var newState: StateBase = this._stateDic[key]\n        if (newState == null) {\n            console.warn(\"unregister state type: \" + key)\n            return\n        }\n\n        if (this._currentState != null) {\n            this._currentState.onExit(newState.getStateKey())\n        }\n\n        this._lastState = this._currentState\n        this._currentState = newState\n        this._currentState.onEnter(obj)\n    }\n\n    public reEnterState(obj: any = null): void {\n        if (this._currentState) this._currentState.onReEnter(obj)\n    }\n\n    /**\n     * 更新\n     *\n     */\n    public update(timeStamp): void {\n        if (this._currentState != null) this._currentState.onUpdate(timeStamp)\n    }\n\n    /**\n     * 当前状态\n     * @return\n     */\n    public getCurrentState(): StateBase {\n        return this._currentState\n    }\n    /**\n     * 当前状态类型\n     * @return\n     */\n    public getCurrentStateKey(): string {\n        if (this._currentState != null) {\n            return this._currentState.getStateKey()\n        }\n        return StateManager.InvalidState\n    }\n\n    /**当前在的状态 */\n    public isInState(stateKey: string) {\n        return stateKey == this.getCurrentStateKey()\n    }\n    /**\n     * 清除\n     */\n    public clear(): void {\n        if (this._currentState != null) this._currentState.onExit(StateManager.InvalidState)\n        this._stateDic = {}\n        this._currentState = null\n        this._lastState = null\n    }\n    /**清除最后的状态 */\n    public dispose() {\n        if (this._currentState != null) this._currentState.onExit(StateManager.InvalidState)\n        this._currentState = null\n        this._lastState = null\n    }\n}\n"]}
{"version":3,"sources":["assets/src/app/ai/fsm/StateManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Description: 状态管理类\n * @Author: Rannar.Yang \n * @Date: 2018-06-29 10:16:55 \n * @Last Modified by: Rannar.Yang\n * @Last Modified time: 2018-07-05 17:35:31\n */\n\nimport { StateBase } from \"./state/StateBase\";\n\nexport class StateManager {\n\tpublic static InvalidState: string = \"Invalid\";\n\n\tprotected _stateDic: { [key: string]: StateBase };\n\tprotected _currentState: StateBase = null;\n\tprotected _lastState: StateBase = null;\n\tprotected _owner: any;\n\n\tconstructor(owner: any) {\n\t\tthis._stateDic = {};\n\t\tthis._owner = owner;\n\t}\n\n\n\tpublic isExist(stateKey: string): boolean {\n\t\treturn !!this._stateDic[stateKey];\n\t}\n\n\tpublic getStateByKey(stateKey: string): StateBase {\n\t\treturn this._stateDic[stateKey];\n\t}\n\n\t/**\n\t * 注册状态 \n\t * @param key\n\t * @param state\n\t * \n\t */\n\tpublic registerState(key: string, state: StateBase): void {\n\t\tif (this._owner != state.owner) {\n\t\t\tconsole.warn(\"statemachine 与 state 所有者不一致\");\n\t\t\treturn;\n\t\t}\n\t\tthis._stateDic[key] = state;\n\t}\n\n\t/**\n\t * 移除状态 \n\t * @param key\n\t * \n\t */\n\tpublic removeState(key: string): void {\n\t\tdelete this._stateDic[key];\n\t}\n\n\t/**\n\t * 改变状态 \n\t * @param key\n\t * @param obj\n\t * @param isForce 当当前状态和要切换的状态相同时，是否强制切换状态\n\t */\n\tpublic changeState(key: string, obj: any = null, isForce = false): void {\n\t\tif (!isForce && this._currentState && this._currentState.getStateKey() == key) {\n\t\t\treturn;\n\t\t}\n\t\tvar newState: StateBase = this._stateDic[key];\n\t\tif (newState == null) {\n\t\t\tconsole.warn(\"unregister state type: \" + key);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._currentState != null) {\n\t\t\tthis._currentState.onExit(newState.getStateKey());\n\t\t}\n\n\t\tthis._lastState = this._currentState;\n\t\tthis._currentState = newState;\n\t\tthis._currentState.onEnter(obj);\n\t}\n\n\tpublic reEnterState(obj: any = null): void {\n\t\tif (this._currentState)\n\t\t\tthis._currentState.onReEnter(obj);\n\t}\n\n\t/**\n\t * 更新 \n\t * \n\t */\n\tpublic update(timeStamp): void {\n\t\tif (this._currentState != null)\n\t\t\tthis._currentState.onUpdate(timeStamp);\n\t}\n\n\t/**\n\t * 当前状态  \n\t * @return \n\t */\n\tpublic getCurrentState(): StateBase {\n\t\treturn this._currentState;\n\t}\n\t/**\n\t * 当前状态类型  \n\t * @return \n\t */\n\tpublic getCurrentStateKey(): string {\n\t\tif (this._currentState != null) {\n\t\t\treturn this._currentState.getStateKey();\n\t\t}\n\t\treturn StateManager.InvalidState;\n\t}\n\n\t/**当前在的状态 */\n\tpublic isInState(stateKey: string) {\n\t\treturn stateKey == this.getCurrentStateKey();\n\t}\n\t/**\n\t * 清除 \n\t */\n\tpublic clear(): void {\n\t\tif (this._currentState != null)\n\t\t\tthis._currentState.onExit(StateManager.InvalidState);\n\t\tthis._stateDic = {};\n\t\tthis._currentState = null;\n\t\tthis._lastState = null;\n\t}\n\t/**清除最后的状态 */\n\tpublic dispose() {\n\t\tif (this._currentState != null)\n\t\t\tthis._currentState.onExit(StateManager.InvalidState);\n\t\tthis._currentState = null;\n\t\tthis._lastState = null;\n\t}\n\n}\n"]}
{"version":3,"sources":["assets/src/app/ai/fsm/state/StatePerformAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAGA,yCAAwC;AACxC,yCAAwC;AAExC;IAAwC,sCAAS;IAAjD;;IAkDA,CAAC;IA/CG;;;OAGG;IACI,qCAAQ,GAAf,UAAgB,SAAiB;QAC7B,qBAAqB;QACrB,IAAI,KAAK,GAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEzC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE;YAC7B,wBAAwB;YACxB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;YAC5C,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,OAAO;SACV;QACD,IAAI,MAAM,GAAe,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;QACzD,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;YACjB,+DAA+D;YAC/D,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;SACtC;QAGD,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE;YAC5B,0BAA0B;YAC1B,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;YACzC,IAAI,OAAO,GAAY,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAE5E,IAAI,OAAO,EAAE;gBACT,yCAAyC;gBACzC,IAAI,OAAO,GAAY,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAE7C,IAAI,CAAC,OAAO,EAAE;oBACV,uCAAuC;oBACvC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;oBAC5C,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBAC7B;aACJ;iBAAM;gBACH,8BAA8B;gBAC9B,yBAAyB;gBACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;aAC/C;SACJ;aAAM;YACH,sCAAsC;YACtC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;YAC5C,KAAK,CAAC,eAAe,EAAE,CAAC;SAC3B;IACL,CAAC;IACL,yBAAC;AAAD,CAlDA,AAkDC,CAlDuC,qBAAS,GAkDhD;AAlDY,gDAAkB","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../goap/GoapAction\";\nimport { GoapAgent } from \"../../goap/GoapAgent\";\nimport { IGoap } from \"../../goap/IGoap\";\nimport { StateBase } from \"./StateBase\";\nimport { StateEnum } from \"./StateEnum\";\n\nexport class StatePerformAction extends StateBase {\n    protected _owner: GoapAgent\n\n    /**\n     * 状态更新 \n     * @return \n     */\n    public onUpdate(timeStamp: number): void {\n        // perform the action\n        let iGoap: IGoap = this.owner.getOwner();\n\n        if (!this.owner.hasActionPlan()) {\n            // no actions to perform\n            console.log(\"Done actions\");\n            this.owner.changeState(StateEnum.StateIdle);\n            iGoap.actionsFinished();\n            return;\n        }\n        let action: GoapAction = this.owner.peekCurrentActions();\n        if (action.isDone()) {\n            // the action is done. Remove it so we can perform the next one\n            this.owner.dequeueCurrentActions();\n        }\n\n\n        if (this.owner.hasActionPlan()) {\n            // perform the next action\n            action = this.owner.peekCurrentActions();\n            let inRange: boolean = action.requiresInRange() ? action.isInRange() : true;\n\n            if (inRange) {\n                // we are in range, so perform the action\n                let success: boolean = action.perform(iGoap);\n\n                if (!success) {\n                    // action failed, we need to plan again\n                    this.owner.changeState(StateEnum.StateIdle);\n                    iGoap.planAborted(action);\n                }\n            } else {\n                // we need to move there first\n                //TODO: push moveTo state\n                this.owner.changeState(StateEnum.StateMove);\n            }\n        } else {\n            // no actions left, move to Plan state\n            this.owner.changeState(StateEnum.StateIdle);\n            iGoap.actionsFinished();\n        }\n    }\n}"]}
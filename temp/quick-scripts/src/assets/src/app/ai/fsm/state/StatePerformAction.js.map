{"version":3,"sources":["assets/src/app/ai/fsm/state/StatePerformAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,kDAAgD;AAEhD,yCAAuC;AACvC,yCAAuC;AAEvC;IAAwC,sCAAS;IAAjD;;IA6CA,CAAC;IA5CU,oCAAO,GAAd,cAAkB,CAAC;IACnB;;;OAGG;IACI,qCAAQ,GAAf,UAAgB,SAAiB;QAC7B,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,qBAAS,CAAC,CAAA;QAClD,IAAI,IAAI,GAAU,SAAS,CAAC,OAAO,EAAE,CAAA;QACrC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE;YAC5B,wBAAwB;YACxB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;YAC3B,SAAS,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAA;YAC1C,IAAI,CAAC,eAAe,EAAE,CAAA;YACtB,OAAM;SACT;QACD,IAAI,MAAM,GAAe,SAAS,CAAC,kBAAkB,EAAE,CAAA;QACvD,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;YACjB,+DAA+D;YAC/D,SAAS,CAAC,qBAAqB,EAAE,CAAA;SACpC;QAED,IAAI,SAAS,CAAC,aAAa,EAAE,EAAE;YAC3B,0BAA0B;YAC1B,MAAM,GAAG,SAAS,CAAC,kBAAkB,EAAE,CAAA;YACvC,IAAI,OAAO,GAAY,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;YAC3E,IAAI,OAAO,EAAE;gBACT,yCAAyC;gBACzC,IAAI,OAAO,GAAY,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBACjD,IAAI,CAAC,OAAO,EAAE;oBACV,uCAAuC;oBACvC,SAAS,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAA;oBAC1C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;iBAC3B;aACJ;iBAAM;gBACH,8BAA8B;gBAC9B,yBAAyB;gBACzB,SAAS,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAA;aAC7C;SACJ;aAAM;YACH,sCAAsC;YACtC,SAAS,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAA;YAC1C,IAAI,CAAC,eAAe,EAAE,CAAA;SACzB;IACL,CAAC;IACL,yBAAC;AAAD,CA7CA,AA6CC,CA7CuC,qBAAS,GA6ChD;AA7CY,gDAAkB","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../goap/GoapAction\"\nimport { GoapAgent } from \"../../goap/GoapAgent\"\nimport { IGoap } from \"../../goap/IGoap\"\nimport { StateBase } from \"./StateBase\"\nimport { StateEnum } from \"./StateEnum\"\n\nexport class StatePerformAction extends StateBase {\n    public onEnter() {}\n    /**\n     * 状态更新\n     * @return\n     */\n    public onUpdate(timeStamp: number): void {\n        let goapAgent = this.owner.getComponent(GoapAgent)\n        let goap: IGoap = goapAgent.getGoap()\n        if (!goapAgent.hasActionPlan()) {\n            // no actions to perform\n            console.log(\"Done actions\")\n            goapAgent.changeState(StateEnum.StateIdle)\n            goap.actionsFinished()\n            return\n        }\n        let action: GoapAction = goapAgent.peekCurrentActions()\n        if (action.isDone()) {\n            // the action is done. Remove it so we can perform the next one\n            goapAgent.dequeueCurrentActions()\n        }\n\n        if (goapAgent.hasActionPlan()) {\n            // perform the next action\n            action = goapAgent.peekCurrentActions()\n            let inRange: boolean = action.requiresInRange() ? action.isInRange() : true\n            if (inRange) {\n                // we are in range, so perform the action\n                let success: boolean = action.perform(this.owner)\n                if (!success) {\n                    // action failed, we need to plan again\n                    goapAgent.changeState(StateEnum.StateIdle)\n                    goap.planAborted(action)\n                }\n            } else {\n                // we need to move there first\n                //TODO: push moveTo state\n                goapAgent.changeState(StateEnum.StateMove)\n            }\n        } else {\n            // no actions left, move to Plan state\n            goapAgent.changeState(StateEnum.StateIdle)\n            goap.actionsFinished()\n        }\n    }\n}\n"]}
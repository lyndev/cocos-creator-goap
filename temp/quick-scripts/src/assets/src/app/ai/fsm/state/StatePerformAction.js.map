{"version":3,"sources":["assets\\src\\app\\ai\\fsm\\state\\StatePerformAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAGA,yCAAwC;AACxC,yCAAwC;AAExC;IAAwC,sCAAS;IAAjD;;IA+CA,CAAC;IA9CG;;;OAGG;IACI,qCAAQ,GAAf,UAAgB,SAAiB;QAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAkB,CAAA;QACnC,IAAI,IAAI,GAAU,KAAK,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE;YACxB,wBAAwB;YACxB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,OAAO;SACV;QACD,IAAI,MAAM,GAAe,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;QACzD,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;YACjB,+DAA+D;YAC/D,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;SACtC;QAGD,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE;YAC5B,0BAA0B;YAC1B,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC;YACzC,IAAI,OAAO,GAAY,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAE5E,IAAI,OAAO,EAAE;gBACT,yCAAyC;gBACzC,IAAI,OAAO,GAAY,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAElD,IAAI,CAAC,OAAO,EAAE;oBACV,uCAAuC;oBACvC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;oBAC5C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBAC5B;aACJ;iBAAM;gBACH,8BAA8B;gBAC9B,yBAAyB;gBACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;aAC/C;SACJ;aAAM;YACH,sCAAsC;YACtC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,EAAE,CAAC;SAC1B;IACL,CAAC;IACL,yBAAC;AAAD,CA/CA,AA+CC,CA/CuC,qBAAS,GA+ChD;AA/CY,gDAAkB","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../goap/GoapAction\";\r\nimport { GoapAgent } from \"../../goap/GoapAgent\";\r\nimport { IGoap } from \"../../goap/IGoap\";\r\nimport { StateBase } from \"./StateBase\";\r\nimport { StateEnum } from \"./StateEnum\";\r\n\r\nexport class StatePerformAction extends StateBase {\r\n    /**\r\n     * 状态更新 \r\n     * @return \r\n     */\r\n    public onUpdate(timeStamp: number): void {\r\n        let owner = this.owner as GoapAgent\r\n        let goap: IGoap = owner.getGoap();\r\n        if (!owner.hasActionPlan()) {\r\n            // no actions to perform\r\n            console.log(\"Done actions\");\r\n            this.owner.changeState(StateEnum.StateIdle);\r\n            goap.actionsFinished();\r\n            return;\r\n        }\r\n        let action: GoapAction = this.owner.peekCurrentActions();\r\n        if (action.isDone()) {\r\n            // the action is done. Remove it so we can perform the next one\r\n            this.owner.dequeueCurrentActions();\r\n        }\r\n\r\n\r\n        if (this.owner.hasActionPlan()) {\r\n            // perform the next action\r\n            action = this.owner.peekCurrentActions();\r\n            let inRange: boolean = action.requiresInRange() ? action.isInRange() : true;\r\n\r\n            if (inRange) {\r\n                // we are in range, so perform the action\r\n                let success: boolean = action.perform(this.owner);\r\n\r\n                if (!success) {\r\n                    // action failed, we need to plan again\r\n                    this.owner.changeState(StateEnum.StateIdle);\r\n                    goap.planAborted(action);\r\n                }\r\n            } else {\r\n                // we need to move there first\r\n                //TODO: push moveTo state\r\n                this.owner.changeState(StateEnum.StateMove);\r\n            }\r\n        } else {\r\n            // no actions left, move to Plan state\r\n            this.owner.changeState(StateEnum.StateIdle);\r\n            goap.actionsFinished();\r\n        }\r\n    }\r\n}"]}
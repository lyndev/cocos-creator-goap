{"version":3,"sources":["assets/src/app/ai/fsm/state/StateIdle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,kDAAgD;AAGhD,yCAAuC;AACvC,yCAAuC;AAEvC;IAA+B,6BAAS;IAAxC;;IAiCA,CAAC;IAhCU,2BAAO,GAAd,cAAkB,CAAC;IAEnB;;;OAGG;IACI,4BAAQ,GAAf,UAAgB,SAAiB;QAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,qBAAS,CAAC,CAAA;QAC9C,IAAI,IAAI,GAAU,KAAK,CAAC,OAAO,EAAE,CAAA;QACjC,IAAI,OAAO,GAAgB,KAAK,CAAC,UAAU,EAAE,CAAA;QAC7C,IAAI,gBAAgB,GAAiB,KAAK,CAAC,mBAAmB,EAAE,CAAA;QAChE,gBAAgB;QAEhB,uDAAuD;QACvD,IAAI,UAAU,GAAwB,IAAI,CAAC,aAAa,EAAE,CAAA;QAC1D,IAAI,IAAI,GAAwB,IAAI,CAAC,eAAe,EAAE,CAAA;QAEtD,OAAO;QACP,IAAI,IAAI,GAAiB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;QACrF,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,0BAA0B;YAC1B,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YAE1B,8BAA8B;YAC9B,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,kBAAkB,CAAC,CAAA;SAClD;aAAM;YACH,6BAA6B;YAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;YACrB,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAA;SACzC;IACL,CAAC;IACL,gBAAC;AAAD,CAjCA,AAiCC,CAjC8B,qBAAS,GAiCvC;AAjCY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../goap/GoapAction\"\nimport { GoapAgent } from \"../../goap/GoapAgent\"\nimport { GoapPlanner } from \"../../goap/GoapPlanner\"\nimport { IGoap } from \"../../goap/IGoap\"\nimport { StateBase } from \"./StateBase\"\nimport { StateEnum } from \"./StateEnum\"\n\nexport class StateIdle extends StateBase {\n    public onEnter() {}\n\n    /**\n     * 状态更新\n     * @return\n     */\n    public onUpdate(timeStamp: number): void {\n        let owner = this.owner.getComponent(GoapAgent)\n        let goap: IGoap = owner.getGoap()\n        let planner: GoapPlanner = owner.getPlanner()\n        let avaliableActions: GoapAction[] = owner.getAvaliableActions()\n        // GOAP planning\n\n        // get the world state and the goal we want to plan for\n        let worldState: Map<string, Object> = goap.getWorldState()\n        let goal: Map<string, Object> = goap.createGoalState()\n\n        // plan\n        let plan: GoapAction[] = planner.plan(owner.node, avaliableActions, worldState, goal)\n        if (plan != null) {\n            // we have a plan, hooray!\n            owner.setCurrentActions(plan)\n            goap.planFound(goal, plan)\n\n            // move to PerformAction state\n            owner.changeState(StateEnum.StatePerformAction)\n        } else {\n            //console.log(\"Failed Plan\");\n            goap.planFailed(goal)\n            owner.changeState(StateEnum.StateIdle)\n        }\n    }\n}\n"]}
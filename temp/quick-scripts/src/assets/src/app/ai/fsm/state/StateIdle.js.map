{"version":3,"sources":["assets\\src\\app\\ai\\fsm\\state\\StateIdle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA,yCAAwC;AACxC,yCAAwC;AAExC;IAA+B,6BAAS;IAAxC;;IAkCA,CAAC;IAjCU,2BAAO,GAAd;IACA,CAAC;IAED;;;OAGG;IACI,4BAAQ,GAAf,UAAgB,SAAiB;QAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAkB,CAAA;QACnC,IAAI,IAAI,GAAU,KAAK,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,OAAO,GAAgB,KAAK,CAAC,UAAU,EAAE,CAAC;QAC9C,IAAI,gBAAgB,GAAiB,KAAK,CAAC,mBAAmB,EAAE,CAAC;QACjE,gBAAgB;QAEhB,uDAAuD;QACvD,IAAI,UAAU,GAAwB,IAAI,CAAC,aAAa,EAAE,CAAC;QAC3D,IAAI,IAAI,GAAwB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvD,OAAO;QACP,IAAI,IAAI,GAAiB,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACjF,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,0BAA0B;YAC1B,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAE3B,8BAA8B;YAC9B,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,kBAAkB,CAAC,CAAC;SACnD;aAAM;YACH,6BAA6B;YAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtB,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;SAC1C;IACL,CAAC;IACL,gBAAC;AAAD,CAlCA,AAkCC,CAlC8B,qBAAS,GAkCvC;AAlCY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../goap/GoapAction\";\r\nimport { GoapAgent } from \"../../goap/GoapAgent\";\r\nimport { GoapPlanner } from \"../../goap/GoapPlanner\";\r\nimport { IGoap } from \"../../goap/IGoap\";\r\nimport { StateBase } from \"./StateBase\";\r\nimport { StateEnum } from \"./StateEnum\";\r\n\r\nexport class StateIdle extends StateBase {\r\n    public onEnter() {\r\n    }\r\n\r\n    /**\r\n     * 状态更新 \r\n     * @return \r\n     */\r\n    public onUpdate(timeStamp: number): void {\r\n        let owner = this.owner as GoapAgent\r\n        let goap: IGoap = owner.getGoap();\r\n        let planner: GoapPlanner = owner.getPlanner();\r\n        let avaliableActions: GoapAction[] = owner.getAvaliableActions();\r\n        // GOAP planning\r\n\r\n        // get the world state and the goal we want to plan for\r\n        let worldState: Map<string, Object> = goap.getWorldState();\r\n        let goal: Map<string, Object> = goap.createGoalState();\r\n\r\n        // plan\r\n        let plan: GoapAction[] = planner.plan(owner, avaliableActions, worldState, goal);\r\n        if (plan != null) {\r\n            // we have a plan, hooray!\r\n            owner.setCurrentActions(plan);\r\n            goap.planFound(goal, plan);\r\n\r\n            // move to PerformAction state\r\n            owner.changeState(StateEnum.StatePerformAction);\r\n        } else {\r\n            //console.log(\"Failed Plan\");\r\n            goap.planFailed(goal);\r\n            owner.changeState(StateEnum.StateIdle);\r\n        }\r\n    }\r\n}"]}
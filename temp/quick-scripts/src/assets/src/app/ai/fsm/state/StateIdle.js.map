{"version":3,"sources":["assets/src/app/ai/fsm/state/StateIdle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA,yCAAwC;AACxC,yCAAwC;AAExC;IAA+B,6BAAS;IAAxC;;IAmCA,CAAC;IAjCU,2BAAO,GAAd;IAEA,CAAC;IACD;;;OAGG;IACI,4BAAQ,GAAf,UAAgB,SAAiB;QAC7B,IAAI,KAAK,GAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACzC,IAAI,OAAO,GAAgB,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QACnD,IAAI,gBAAgB,GAAiB,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;QACtE,sDAAsD;QACtD,gBAAgB;QAEhB,uDAAuD;QACvD,IAAI,UAAU,GAAwB,KAAK,CAAC,aAAa,EAAE,CAAC;QAC5D,IAAI,IAAI,GAAwB,KAAK,CAAC,eAAe,EAAE,CAAC;QAExD,OAAO;QACP,IAAI,IAAI,GAAiB,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACjF,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,0BAA0B;YAC1B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACnC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAE5B,8BAA8B;YAC9B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,kBAAkB,CAAC,CAAC;SACxD;aAAM;YACH,6BAA6B;YAC7B,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAS,CAAC,SAAS,CAAC,CAAC;SAC/C;IACL,CAAC;IACL,gBAAC;AAAD,CAnCA,AAmCC,CAnC8B,qBAAS,GAmCvC;AAnCY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../goap/GoapAction\";\nimport { GoapAgent } from \"../../goap/GoapAgent\";\nimport { GoapPlanner } from \"../../goap/GoapPlanner\";\nimport { IGoap } from \"../../goap/IGoap\";\nimport { StateBase } from \"./StateBase\";\nimport { StateEnum } from \"./StateEnum\";\n\nexport class StateIdle extends StateBase {\n    protected _owner: GoapAgent\n    public onEnter() {\n\n    }\n    /**\n     * 状态更新 \n     * @return \n     */\n    public onUpdate(timeStamp: number): void {\n        let iGoap: IGoap = this.owner.getOwner();\n        let planner: GoapPlanner = this.owner.getPlanner();\n        let avaliableActions: GoapAction[] = this.owner.getAvaliableActions();\n        //console.log(\"avaliableActions: \", avaliableActions);\n        // GOAP planning\n\n        // get the world state and the goal we want to plan for\n        let worldState: Map<string, Object> = iGoap.getWorldState();\n        let goal: Map<string, Object> = iGoap.createGoalState();\n\n        // plan\n        let plan: GoapAction[] = planner.plan(iGoap, avaliableActions, worldState, goal);\n        if (plan != null) {\n            // we have a plan, hooray!\n            this.owner.setCurrentActions(plan);\n            iGoap.planFound(goal, plan);\n\n            // move to PerformAction state\n            this.owner.changeState(StateEnum.StatePerformAction);\n        } else {\n            //console.log(\"Failed Plan\");\n            iGoap.planFailed(goal);\n            this.owner.changeState(StateEnum.StateIdle);\n        }\n    }\n}"]}
{"version":3,"sources":["assets/src/app/ai/goap/IGoap.ts"],"names":[],"mappings":";;;;;AAAA;;;;;;GAMG","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Description: \n * @Author: RannarYang \n * @Date: 2018-09-06 00:09:38 \n * @Last Modified by:   RannarYang \n * @Last Modified time: 2018-09-06 00:09:38 \n */\n\nimport { GoapAction } from \"./GoapAction\";\n\n/**\n * Any agent that wants to use GOAP must implement\n * this interface. It provides information to the GOAP\n * planner so it can plan what actions to use.\n * \n * It also provides an interface for the planner to give \n * feedback to the Agent and report success/failure.\n */\nexport interface IGoap {\n\t/**\n\t * The starting state of the Agent and the world.\n\t * Supply what states are needed for actions to run.\n\t */\n\tgetWorldState(): Map<string, Object>;\n\n\tgetAvaliableActions(): GoapAction[];\n\n\t/**\n\t * Give the planner a new goal so it can figure out \n\t * the actions needed to fulfill it.\n\t */\n\tcreateGoalState(): Map<string, Object>;\n\n\t/**\n\t * No sequence of actions could be found for the supplied goal.\n\t * You will need to try another goal\n\t */\n\tplanFailed(failedGoal: Map<string, Object>): void;\n\n\t/**\n\t * A plan was found for the supplied goal.\n\t * These are the actions the Agent will perform, in order.\n\t */\n\tplanFound(goal: Map<string, Object>, actions: GoapAction[]): void;\n\n\t/**\n\t * All actions are complete and the goal was reached. Hooray!\n\t */\n\tactionsFinished(): void;\n\n\t/**\n\t * One of the actions caused the plan to abort.\n\t * That action is returned.\n\t */\n\tplanAborted(aborter: GoapAction): void;\n\n\t/**\n\t * Called during Update. Move the agent towards the target in order\n\t * for the next action to be able to perform.\n\t * Return true if the Agent is at the target and the next action can perform.\n\t * False if it is not there yet.\n\t */\n\tmoveAgent(nextAction: GoapAction, delta: number): boolean;\n}"]}
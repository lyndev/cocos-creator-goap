{"version":3,"sources":["assets\\goap\\goaps\\GoapOutFire.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { GoapAction } from \"../../src/app/ai/goap/GoapAction\";\r\nimport { IGoap } from \"../../src/app/ai/goap/IGoap\";\r\nimport { ActionDataStatus } from \"../ActionDataStatus\";\r\nimport DataMemory from \"../DataMemory\";\r\n\r\nexport default class GoapOutFire implements IGoap {\r\n    /**拥有的actions */\r\n    private avaliableActions: GoapAction[] = [];\r\n    public initAvaliableActions(actionCls: any[]) {\r\n        let action;\r\n        for (let i = 0, len = actionCls.length; i < len; i++) {\r\n            action = new actionCls[i]();\r\n            this.avaliableActions.push(action);\r\n        }\r\n    }\r\n\r\n    getAvaliableActions(): GoapAction[] {\r\n        return this.avaliableActions\r\n    }\r\n\r\n    // 该计划的目标\r\n    createGoalState(): Map<string, Object> {\r\n        let goal = new Map<string, Object>();\r\n        goal.set(ActionDataStatus.outFire, true);\r\n        return goal\r\n    }\r\n\r\n    memory: DataMemory\r\n    bMoveEnd: boolean = false\r\n    bMoving: boolean = false\r\n    getWorldState(): Map<string, Object> {\r\n        let worldData: Map<string, Object> = new Map<string, Object>();\r\n        worldData.set(ActionDataStatus.isTolietOk, this.memory.get(ActionDataStatus.isTolietOk));\r\n        worldData.set(ActionDataStatus.isCanOutfire, this.memory.get(ActionDataStatus.isCanOutfire));\r\n        worldData.set(ActionDataStatus.isEquipOk, this.memory.get(ActionDataStatus.isEquipOk));\r\n        worldData.set(ActionDataStatus.isFireOk, this.memory.get(ActionDataStatus.isFireOk));\r\n        worldData.set(ActionDataStatus.isSleepOk, this.memory.get(ActionDataStatus.isSleepOk));\r\n        return worldData;\r\n    }\r\n\r\n    planFailed(failedGoal: Map<string, Object>): void {\r\n        console.log(\"planFailed\")\r\n    }\r\n\r\n    planFound(goal: Map<string, Object>, actions: GoapAction[]): void {\r\n        console.log(\"planFound\")\r\n    }\r\n\r\n    actionsFinished(): void {\r\n        console.log(\"Actions completed\");\r\n    }\r\n\r\n    planAborted(aborter: GoapAction): void {\r\n        console.log(\"planAborted\")\r\n    }\r\n\r\n    moveAgent(nextAction: GoapAction, delta: number): boolean {\r\n        let target = nextAction.target;\r\n        if (this.bMoveEnd) {\r\n            this.bMoveEnd = false\r\n            return true\r\n        }\r\n        if (!this.bMoving) {\r\n            this.bMoving = true\r\n            let actions = []\r\n            actions.push(cc.moveTo(2, new cc.Vec2(target.node.x, target.node.y)))\r\n            actions.push(cc.callFunc(() => {\r\n                this.bMoveEnd = true\r\n                this.bMoving = false\r\n                nextAction.setInRange(true);\r\n            }))\r\n            target.node.stopAllActions()\r\n            target.node.runAction(cc.sequence(actions))\r\n        }\r\n\r\n        return this.bMoveEnd\r\n    }\r\n}"]}